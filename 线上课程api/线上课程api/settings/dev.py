"""
Django settings for 线上课程api project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 新增一个系统导包路径
import sys

sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'g+g%6o0n)0ihwz4*8fis6khxtyo$u$^a6r-7$-9@m^m*2f1x&#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '*',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django_filters',
    'corsheaders',
    # 注意，加上drf框架的注册
    'rest_framework',
    'xadmin',
    'crispy_forms',
    'reversion',

    # 子应用
    'home',
    'user',
    'course',
    'oauth',
]

MIDDLEWARE = [

    'corsheaders.middleware.CorsMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS组的配置信息
CORS_ORIGIN_WHITELIST = (
    'http://127.0.0.1:8080',
    'http://www.moluo.net:8080',
    'http://www.feedertv.com:8080',
)
CORS_ALLOW_CREDENTIALS = False  # 允许ajax跨域请求时携带cookie

ROOT_URLCONF = '线上课程api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '线上课程api.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'online_course',
        'HOST': '127.0.0.1',
        'PORT': 3306,
        'USER': 'root',
        'PASSWORD': '12345678',
    }
}

# 设置redis缓存
CACHES = {
    # 默认缓存
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        # 项目上线时,需要调整这里的路径
        "LOCATION": "redis://127.0.0.1:6379/0",

        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 提供给xadmin或者admin的session存储
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 提供存储短信验证码
    "sms_code": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# 设置xadmin用户登录时,登录信息session保存到redis
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 使用自定义的模型类
AUTH_USER_MODEL = 'user.User'

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

# 修改使用中文界面
LANGUAGE_CODE = 'zh-Hans'

# 修改时区
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

# 访问静态文件的url地址前缀
STATIC_URL = '/static/'
# 设置django的静态文件目录
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# 项目中存储上传文件的根目录[暂时配置],注意,uploadsm目录需要手动创建否则上传文件时报错
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')
# 访问上传文件的url地址前缀
MEDIA_URL = '/media/'

# 日志配置
LOGGING = {
    # python日志版本号
    'version': 1,
    # 是否禁用其他日志
    'disable_existing_loggers': False,
    # 记录日志格式
    # levelname  : 日志错误级别
    # asctime    : 出现时间
    # module     : 错误文件
    # process:d  : 错误进程号
    # thread:d   : 错误线程号
    # message    : 错误信息

    'formatters': {
        # 详细级别
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s',
        },
        # 简易级别
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s',
        },
    },
    # 过滤器(过滤日志信息)
    'filters': {
        # 过滤特殊参数 foo 转变成 bar
        # 'special': {
        #     '()': 'project.logging.SpecialFilter',
        #     'foo': 'bar',
        # },

        # 要DEBUG= TRUE 过滤掉调试时的日志
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 日志处理器
    'handlers': {
        # 终端
        'console': {
            'level': 'DEBUG',  # 等级
            'filters': ['require_debug_true'],  # 通过什么过滤
            'class': 'logging.StreamHandler',  # 输出到类文件对象等等
            'formatter': 'simple'  # 输出方式简易模式
        },

        # 文件
        'file': {
            # 记录最低的级别
            'level': 'INFO',
            # 日志位置，日志文件名，日志保存目录必须手动创建
            'filename': os.path.join(os.path.dirname(BASE_DIR), 'logs/线上课程.log'),
            # 通过什么类实现
            'class': 'logging.handlers.RotatingFileHandler',
            # 日志的最大值，这里我设置600M
            'maxBytes': 600 * 1024 * 1024,
            # 日志文件的数量，设置最大日志数量为10
            'backupCount': 10,
            # 日志格式：详细格式
            'formatter': 'verbose'
        }

        # 通过邮件通知管理员
        # 'mail_admins': {
        #     'level': 'ERROR',
        #     'class': 'django.utils.log.AdminEmailHandler',
        #     'filters': ['special']
        # }
    },
    # 日志对象
    'loggers': {
        'django': {  # 基于Django的日志配置
            'handlers': ['console', 'file'],  # 使用什么处理器
            'propagate': True,  # 是否让日志冒泡给其他日志处理系统
            # },
            # 'django.request': {
            #     'handlers': ['mail_admins'],
            #     'level': 'ERROR',
            #     'propagate': False,
            # },
            # 'myproject.custom': {
            #     'handlers': ['console', 'mail_admins'],
            #     'level': 'INFO',
            #     'filters': ['special']
            # }
        }
    }
}

# 异常错误配置
REST_FRAMEWORK = {
    # 异常处理
    'EXCEPTION_HANDLER': '线上课程api.utils.exceptions.custom_exception_handler',
    # 配置JWT
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',

    ),

}
# 配置JWT
import datetime

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'user.utils.jwt_response_payload_handler',
}

# 配置自定义的认证后端
AUTHENTICATION_BACKENDS = [
    'user.utils.UsernameMobileAuthBackend',
]

GEETEST = {
    "pc_geetest_id": "e951ba436ca7c3f6192615f006d0b2ae",
    "pc_geetest_key": "fba7357abd64ff84132bd520834afe4e",
}

SMS = {
    "_accountSid": '8a216da86e011fa3016e81327ed646bb',
    "_accountToken": '23e74a14336c48e892b540e6ac03adee',
    "_appId": '8a216da86e011fa3016e81327f2a46c1',
    "_serverIP": 'sandboxapp.cloopen.com',
    "_serverPort": "8883",
    "_softVersion": '2013-12-26',
}

# 客户端IP
CLIENT_HOST = 'http://127.0.0.1:8080'

# 使用163邮箱
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.163.com'
EMAIL_PORT = 25
# 发送邮件的邮箱
EMAIL_HOST_USER = 'zxc15602365270@163.com'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'Qaz13535896423'
# 收件人看到的发件人
EMAIL_FROM = '广东理工学院<zxc15602365270@163.com>'

# QQ登录参数
QQ_APP_ID = '101842319'
QQ_APP_KEY = 'f59db93ecdbd42fd9d9899e1b5b3a5d5'
QQ_REDIRECT_URL = 'http://www.feedertv.com:8080/qq_callback'
QQ_STATE = "/"  # 用于保存登录成功后的跳转页面路径